from django.db import models
from users.models import User
from locations.models import City
from django.core.validators import MinValueValidator
from django.utils import timezone

CURRENCY_CHOICES = [
    ("EUR", "Euro"),
    ("USD", "US Dollar"),
    ("GBP", "Pound Sterling"),
    ("CHF", "Swiss Franc"),
    ("PLN", "Polish Zloty"),
    ("CZK", "Czech Koruna"),
]

PROPERTY_TYPE_CHOICES = [
    ("house", "–î–æ–º"),
    ("apartment", "–ö–≤–∞—Ä—Ç–∏—Ä–∞"),
    ("studio", "–°—Ç—É–¥–∏—è"),
    ("room", "–ö–æ–º–Ω–∞—Ç–∞"),
]


class Listing(models.Model):
    owner = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="listings",
        verbose_name="–í–ª–∞–¥–µ–ª–µ—Ü",
    )
    title = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")

    # üîπ –¶–µ–Ω–∞ –∏ –≤–∞–ª—é—Ç–∞
    price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        validators=[MinValueValidator(1)],
        verbose_name="–¶–µ–Ω–∞",
    )
    price_currency = models.CharField(
        max_length=3,
        choices=CURRENCY_CHOICES,
        default="EUR",
        verbose_name="–í–∞–ª—é—Ç–∞",
    )

    # üîπ –¢–∏–ø –∂–∏–ª—å—è –∏ –∫–æ–º–Ω–∞—Ç—ã
    property_type = models.CharField(
        max_length=20,
        choices=PROPERTY_TYPE_CHOICES,
        default="apartment",
        verbose_name="–¢–∏–ø –∂–∏–ª—å—è",
    )
    rooms = models.PositiveIntegerField(
        default=1,
        validators=[MinValueValidator(1)],
        verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
    )

    # üîπ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    rating = models.FloatField(default=0, verbose_name="–†–µ–π—Ç–∏–Ω–≥")
    is_available = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–æ")

    # üîπ –ê–¥—Ä–µ—Å
    country = models.CharField(max_length=100, verbose_name="–°—Ç—Ä–∞–Ω–∞")
    city = models.ForeignKey(
        City,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="listings",
        verbose_name="–ì–æ—Ä–æ–¥",
    )
    street = models.CharField(max_length=255, verbose_name="–£–ª–∏—Ü–∞")
    house_number = models.CharField(max_length=10, verbose_name="–ù–æ–º–µ—Ä –¥–æ–º–∞")
    apartment_number = models.CharField(
        max_length=10, null=True, blank=True, verbose_name="–ö–≤–∞—Ä—Ç–∏—Ä–∞"
    )

    # üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    view_count = models.PositiveIntegerField(default=0, verbose_name="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")

    class Meta:
        ordering = ["-created_at"]
        verbose_name = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ"
        verbose_name_plural = "–û–±—ä—è–≤–ª–µ–Ω–∏—è"
        constraints = [
            models.UniqueConstraint(
                fields=["owner", "title", "street", "house_number", "apartment_number"],
                name="unique_owner_listing_address",
            )
        ]

    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        city_name = self.city.name if self.city else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
        if self.apartment_number:
            return f"{self.title} ‚Äî {city_name}, {self.street} {self.house_number}, –∫–≤. {self.apartment_number}"
        return f"{self.title} ‚Äî {city_name}, {self.street} {self.house_number}"


class ListingView(models.Model):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    listing = models.ForeignKey(
        "Listing",
        on_delete=models.CASCADE,
        related_name="views",
        verbose_name="–û–±—ä—è–≤–ª–µ–Ω–∏–µ",
    )
    user = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="listing_views",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    )
    ip_address = models.GenericIPAddressField(
        null=True, blank=True, verbose_name="IP-–∞–¥—Ä–µ—Å"
    )
    viewed_at = models.DateTimeField(default=timezone.now, verbose_name="–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

    class Meta:
        verbose_name = "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
        verbose_name_plural = "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
        ordering = ["-viewed_at"]

    def __str__(self):
        user_str = self.user.username if self.user else "–ê–Ω–æ–Ω–∏–º"
        return f"{user_str} ‚Üí {self.listing.title} ({self.viewed_at.strftime('%Y-%m-%d %H:%M')})"
