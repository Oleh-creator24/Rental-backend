from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group
from django.utils import timezone
from faker import Faker
import random
import logging

from users.models import User
from listings.models import Listing
from bookings.models import Booking
from reviews.models import Review
from locations.models import City, State, Country, Region

logger = logging.getLogger(__name__)
fake = Faker("de_DE")  # –Ω–µ–º–µ—Ü–∫–∞—è –ª–æ–∫–∞–ª—å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


class Command(BaseCommand):
    help = "–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ª–æ–∫–∞—Ü–∏—è–º–∏, –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –∏ –æ—Ç–∑—ã–≤–∞–º–∏."

    def handle(self, *args, **options):
        logger.info("üîπ –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # === –ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
        landlord_group, _ = Group.objects.get_or_create(name="Landlord")
        guest_group, _ = Group.objects.get_or_create(name="Guest")

        # === –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
        users = []
        for _ in range(20):
            user = User.objects.create_user(
                username=fake.user_name(),
                email=fake.email(),
                password="password123",
            )
            user_group = random.choice([landlord_group, guest_group])
            user.groups.add(user_group)
            users.append(user)
            logger.info(f"[USERS] üë§ User '{user.username}' added to group '{user_group.name}'")

        self.stdout.write(self.style.SUCCESS("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –≥—Ä—É–ø–ø–∞–º!"))

        # === –†–µ–≥–∏–æ–Ω—ã –∏ —Å—Ç—Ä–∞–Ω—ã ===
        region, _ = Region.objects.get_or_create(name="Europe")
        country, _ = Country.objects.get_or_create(name="Germany", region=region)
        self.stdout.write(self.style.SUCCESS(f"üåç –°—Ç—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: {country.name}"))

        # === –®—Ç–∞—Ç—ã ===
        states = []
        state_names = [
            "Bayern",
            "Berlin",
            "Nordrhein-Westfalen",
            "Hessen",
            "Sachsen",
            "Baden-W√ºrttemberg",
        ]
        for name in state_names:
            state, _ = State.objects.get_or_create(name=name, country=country)
            states.append(state)
        self.stdout.write(self.style.SUCCESS(f"üèûÔ∏è –®—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: {len(states)} —à—Ç."))

        # === –ì–æ—Ä–æ–¥–∞ ===
        cities = []
        for _ in range(10):
            city_name = fake.city()
            state = random.choice(states)
            city, _ = City.objects.get_or_create(name=city_name, state=state)
            cities.append(city)
        self.stdout.write(self.style.SUCCESS(f"üèôÔ∏è –ì–æ—Ä–æ–¥–∞ —Å–æ–∑–¥–∞–Ω—ã: {len(cities)} —à—Ç."))

        # === –û–±—ä—è–≤–ª–µ–Ω–∏—è ===
        listings = []
        for _ in range(30):
            owner = random.choice(users)
            if owner.groups.filter(name="Landlord").exists():
                city = random.choice(cities)
                listing = Listing.objects.create(
                    owner=owner,
                    title=fake.sentence(nb_words=3),
                    description=fake.text(max_nb_chars=200),
                    price=random.randint(50, 400),
                    city=city,
                    is_available=random.choice([True, True, False]),
                    created_at=timezone.now(),
                )
                listings.append(listing)
        self.stdout.write(self.style.SUCCESS(f"üè° –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len(listings)} —à—Ç."))

        # === –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ===
        bookings = []
        guests = [u for u in users if u.groups.filter(name="Guest").exists()]

        for _ in range(40):
            guest = random.choice(guests)
            listing = random.choice(listings)
            start_date = timezone.now().date() + timezone.timedelta(days=random.randint(1, 10))
            end_date = start_date + timezone.timedelta(days=random.randint(2, 14))
            booking = Booking.objects.create(
                tenant=guest,  # ‚úÖ –∑–∞–º–µ–Ω–µ–Ω–æ user ‚Üí tenant
                listing=listing,
                start_date=start_date,
                end_date=end_date,
                status=random.choice(["pending", "approved", "canceled"]),
            )
            bookings.append(booking)
        self.stdout.write(self.style.SUCCESS(f"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len(bookings)} —à—Ç."))

        # === –û—Ç–∑—ã–≤—ã ===
        for _ in range(20):
            Review.objects.create(
                user=random.choice(users),
                listing=random.choice(listings),
                rating=random.randint(1, 5),
                comment=fake.sentence(),
                created_at=timezone.now(),
            )
        self.stdout.write(self.style.SUCCESS("‚≠ê –û—Ç–∑—ã–≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!"))

        logger.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
        self.stdout.write(self.style.SUCCESS("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"))
